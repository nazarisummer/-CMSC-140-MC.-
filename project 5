//
//  Project 5
//
//  Created by Summer  Nazari 
//

#include <iostream>
#include <string>

using namespace std;

// Global constants
const int MIN = 1; // The value of the smallest number
const int MAX = 9; // The value of the largest number


// Function prototypes
bool isMagicSquare(int arrayRow1[], int arrayRow2[], int arrayRow3[], int size);
bool checkRange(int arrayRow1[], int arrayRow2[], int arrayRow3[], int size, int MIN, int MAZ);
bool checkUnique(int arrayRow1[], int arrayRow2[], int arrayRow3[], int size);
bool checkRowSum(int arrayRow1[], int arrayRow2[], int arrayRow3[], int size);
bool checkColSum(int arrayRow1[], int arrayRow2[], int arrayRow3[], int size);
bool checkDiagSum(int arrayRow1[], int arrayRow2[], int arrayRow3[], int size);
void fillArray(int arrayRow1[], int arrayRow2[], int arrayRow3[], int size);

void showArray(int arrayRow1[], int arrayRow2[], int arrayRow3[], int size);

int main() {
    
    //Varaibles used in main
    const string PROGRAMMER_NAME = " Summer Nazari \n"; //Const holds creator of project
    const string PROJECT_TITLE = "Project 5 \n"; //Const holds project title
    const string DUE_DATE_OF_PROJECT = " April, 30 2023 \n"; //Const holds due date project
     const int SIZE =3; //size value use to compare other value
    int magicArrayRow1[SIZE], magicArrayRow2[SIZE], magicArrayRow3[SIZE];
    char userWantToRepeatCode; //A variable to hold a yes or no answer from user if user wants to repat this code agian
 
    
    // Program header
    cout << "   LO SHU MAGIC SQUARE \n";
    cout<<" \n";
    
    //Propt function
    fillArray (magicArrayRow1,magicArrayRow2,magicArrayRow3, SIZE);
    showArray(magicArrayRow1, magicArrayRow2, magicArrayRow3, SIZE);
    
//Prompt to display if user all 9 numbers are magic squares
  isMagicSquare(magicArrayRow1,magicArrayRow1,magicArrayRow1, SIZE);
    cout<< " \n";

    //Ask if user wants to repet this code agian
    cout<< "Do you want to try agian ? ";
    cin>>userWantToRepeatCode;
    if ( userWantToRepeatCode == 'y' || userWantToRepeatCode == 'Y' )
    {
        
        
        fillArray (magicArrayRow1,magicArrayRow2,magicArrayRow3, SIZE);
            showArray(magicArrayRow1,magicArrayRow2,magicArrayRow3, SIZE);
        isMagicSquare(magicArrayRow1,magicArrayRow2,magicArrayRow3, SIZE);
    }
    
    
    //Program End
    cout<<" \n";
    cout<<"Thank you for testing my program \n";
    cout<<" \n";
    cout<<"Programmer: "<<PROGRAMMER_NAME;
    cout<<PROJECT_TITLE;
    cout<<"Date Due"<<DUE_DATE_OF_PROJECT;
    cout<<" \n";
    return 0;
}

//Prompt for user to read and enter their numbers
//Function that holds two for loops to store all 3 number of  magic sqaure row
void fillArray(int arrayRow1[], int arrayRow2[], int arrayRow3[], int size) {
    //Prompt for first row
    int i = 0;
   
       do {
           cout << "Enter 3 numbers for row " << i + 1 << ": ";
           cin >> arrayRow1[i] >> arrayRow2[i] >> arrayRow3[i];
           i++;
       } while (i < size);
   }
//Function that displays user magic sqaure numbers
void showArray(int arrayRow1[], int arrayRow2[], int arrayRow3[], int size) {
    for (int i = 0; i < size; i++) {
        
        
        cout << arrayRow1[i]<<" " << arrayRow2[i]<<" " << arrayRow3[i] <<" "<< endl;
        
    }
}

//A function that has all of the function to check if user numbers are suited for a magic square
bool isMagicSquare(int arrayRow1[], int arrayRow2[], int arrayRow3[], int size)
{
    return checkRange(arrayRow1,arrayRow2,arrayRow3,  size,  MIN,  MAX)&&
  checkUnique(arrayRow1,arrayRow2,arrayRow3,  size)&&
   checkRowSum( arrayRow1,arrayRow2,arrayRow3, size)&&
  checkColSum( arrayRow1,arrayRow2,arrayRow3, size)&&
    checkDiagSum( arrayRow1,arrayRow2,arrayRow3, size);
    
    }
//Function that checks is user number is in the range of 1-9
//   *If all the numbers are in the  range  to each other return a ture
//    *If all the numbers are the same return a false and flase statement
bool checkRange(int arrayRow1[], int arrayRow2[], int arrayRow3[], int size, int MIN, int MAX){
    if (arrayRow1[size] > MAX || arrayRow1[size] < MIN || arrayRow2[size] > MAX || arrayRow2[size] < MIN ||arrayRow3[size] > MAX || arrayRow3[size] < MIN)
        
    {
        cout<< "This is not a Lu Shu magic sqaure. ";
        return false ;
        
    }
    else
    {
        cout<<" This is a Lu Shu Magic Sqaure";
        return true ;
        
    }
}
//Function that each row of magic sqaure users are not entering the same number
//   *If all the numbers are the same  to each other return a ture
//    *If all the numbers are the same return a false and flase statement
bool checkUnique(int arrayRow1[], int arrayRow2[], int arrayRow3[], int size) {
    bool  userNumnerISUnique = true;
    cout<< " This is a Lu Shu Magic Square";
    int count[9] = {0};
    for (int i = 0; i < size; i++) {
        count[arrayRow1[i] - 1]++;
        count[arrayRow2[i] - 1]++;
        count[arrayRow3[i] - 1]++;
    }
    for (int i = 0; i < 9; i++) {
        if (count[i] != 1) {
            userNumnerISUnique = false;
            cout<< "This is not a Lu Shu magic sqaure. ";
        }
        
    }

    return  userNumnerISUnique;
}
//Function that checks each rows sum
//make sure all three row share the same sum vlaue
//   *If all the numbers are equal to each other return a ture
//    *If false return a false and flase statement
bool checkRowSum(int arrayRow1[], int arrayRow2[], int arrayRow3[], int size){
    int sumOFRow1 = 0, sumOFRow2 = 0,  sumOFRow3 = 0;
    for (int i = 0; i < size; i++)
    {
        sumOFRow1 += arrayRow1[i];
        sumOFRow2 += arrayRow2[i];
        sumOFRow3 += arrayRow3[i];
    }
       if ( sumOFRow1 == sumOFRow2 && sumOFRow2 == sumOFRow3)
       {
           return true;
       }
           else
           {
               cout<< "This is not a Lu Shu magic sqaure. ";
               return false;
       }
        
}
//Add all three of the columns sum
//Check to see if all three of the sum  are equal to eavh other
//   *If all the numbers are equal to each other return a ture
//    *If false return a false and flase statement

bool checkColSum(int arrayRow1[], int arrayRow2[], int arrayRow3[], int size)
{
    int magicSqaure1=arrayRow1[1]+arrayRow2[1]+arrayRow3[1];
    int magicSqaure2=arrayRow1[2]+arrayRow2[2]+arrayRow3[2];
    int magicSqaure3=arrayRow1[3]+arrayRow2[3]+arrayRow3[3];
    if ( magicSqaure1 ==magicSqaure2 ==magicSqaure3 )
    {
        return true;
    }
    else
        cout<< "This is not a Lu Shu magic sqaure. ";
        return false;
}
//Checking magic sqaure numbers in a diagonals way
//Add all of the diagonal number in the magic square
//Check to see if the numbers in the magic square are eqaul to each other
//   *If all the numbers are equal to each other return a ture
//    *If false return a false and flase statement
bool checkDiagSum(int arrayRow1[], int arrayRow2[], int arrayRow3[], int size)
{
    int diagMagicSqaure1 = arrayRow1[3] + arrayRow2[2]+arrayRow3[1];
    int diagMagicSqaure2 = arrayRow1[1] + arrayRow2[2]+arrayRow3[3];
    if (diagMagicSqaure1 ==diagMagicSqaure2 )
    {
        return true ;
    }
    else
        cout<< "This is not a Lu Shu magic sqaure. ";
        return false;
}


